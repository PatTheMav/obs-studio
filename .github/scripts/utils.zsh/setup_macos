autoload -Uz log_error log_status log_info mkcd

if (( ! ${+commands[curl]} )) {
  log_error 'curl not found. Please install curl.'
  return 2
}

if (( ! ${+commands[jq]} )) {
  log_error 'jq not found. Please install jq.'
  return 2
}

if (( ! ${+project_root} )) {
  log_error "'project_root' not set. Please set before running ${0}."
  return 2
}

if (( ! ${+target} )) {
  log_error "'target' not set. Please set before running ${0}."
  return 2
}

local -a curl_opts=()
if (( ! ${+CI} )) {
  curl_opts+=(--progress-bar --continue-at -)
} else {
  curl_opts+=(--show-error --silent)
}
curl_opts+=(--location -O ${@})

pushd ${project_root}

typeset -g QT_VERSION
typeset -g DEPLOYMENT_TARGET
typeset -g BUILD_TARGET
read -r QT_VERSION DEPLOYMENT_TARGET BUILD_TARGET <<< \
  "$(jq -r --arg target "${target}" \
    '.platformConfig[$target] | { qtVersion, deploymentTarget, buildTarget } | join(" ")' \
    ${project_root}/buildspec.json)"

if (( ! (${skips[(Ie)all]} + ${skips[(Ie)deps]}) )) {
  mkdir -p ${project_root:h}/obs-build-dependencies
  local deps_version
  local deps_baseurl
  local deps_label
  local deps_hash
  for dependency ('prebuilt' "qt${QT_VERSION}" 'sparkle' 'vlc' 'cef') {
    IFS=';' read -r deps_version deps_baseurl deps_label deps_hash <<< \
      "$(jq -r --arg dependency "${dependency}" --arg target "${target}" \
         '.dependencies[$dependency] | {version, baseUrl, "label", "hash": .hashes[$target]} | join(";")' \
         ${buildspec_file})"

    if [[ -z "${deps_version}" ]] {
      log_error "No ${dependency} spec found in buildspec.json."
      return 2
    }
    log_info "Setting up ${deps_label}..."

    pushd ${project_root:h}/obs-build-dependencies

    if [[ ${dependency} != 'cef' ]] {
      case ${dependency} {
        prebuilt)
          _filename="macos-deps-${deps_version}-${target##*-}.tar.xz"
          _url="${deps_baseurl}/${deps_version}/${_filename}"
          _target="obs-deps-${deps_version}-${target##*-}"
          typeset -g OBS_DEPS_VERSION=${deps_version}
          ;;
        qt*)
          _filename="macos-deps-qt${QT_VERSION}-${deps_version}-${target##*-}.tar.xz"
          _url="${deps_baseurl}/${deps_version}/${_filename}"
          _target="obs-deps-${deps_version}-${target##*-}"
          ;;
        sparkle)
          _filename="Sparkle-${deps_version}.tar.xz"
          _url="${deps_baseurl}/${deps_version}/${_filename}"
          _target="sparkle"
          ;;
        vlc)
          _filename="vlc-${deps_version}.tar.xz"
          _url="${deps_baseurl}/${deps_version}/${_filename}"
          _target="vlc-${deps_version}"
          typeset -g VLC_VERSION=${deps_version}
          ;;
      }

      if [[ ! -f ${_filename} ]] {
        log_debug "Running curl ${curl_opts} ${_url}"
        curl ${curl_opts} ${_url} && \
        log_status "Downloaded ${deps_label} for ${target}."
      } else {
        log_status "Found downloaded ${deps_label}"
      }

      read -r artifact_checksum _ <<< "$(sha256sum ${_filename})"
      if [[ ${deps_hash} != ${artifact_checksum} ]] {
        log_error "Checksum of downloaded ${deps_label} does not match specification.
  Expected : ${deps_hash}
  Actual   : ${artifact_checksum}"
        return 2
      }
      log_status "Checksum of downloaded ${deps_label} matches."

      if (( ! (${skips[(Ie)all]} + ${skips[(Ie)unpack]}) )) {
        mkdir -p ${_target} && pushd ${_target}

        if [[ ${dependency} == 'vlc' ]] {
          XZ_OPT=-T0 tar --strip-components 1 -xzf ../${_filename} && log_status "${deps_label} extracted."
        } elif [[ ${dependency} == 'sparkle' ]] {
          XZ_OPT=-T0 tar -xzf ../${_filename} && log_status "${deps_label} extracted."

          if (( ${+CODESIGN} )) {
            log_info "Codesigning Sparkle Framework..."
            autoload -Uz read_codesign && read_codesign
            codesign --force --sign "${CODESIGN_IDENT:-}" --timestamp -o runtime Sparkle.framework
            codesign --force --sign "${CODESIGN_IDENT:-}" --timestamp -o runtime Sparkle.framework/Resources/Autoupdate.app
            codesign --force --sign "${CODESIGN_IDENT:-}" --timestamp -o runtime Sparkle.framework/Resources/Autoupdate.app/Contents/MacOS/fileop
          }

          for file (Sparkle.framework*) {
            ditto -rsrc ${file} ../obs-deps-${OBS_DEPS_VERSION}-${target##*-}/lib/${file:A:t}
          }
        } else {
          XZ_OPT=-T0 tar -xzf ../${_filename} && log_status "${deps_label} extracted."
        }
        popd
      }
    } else {
      # Special build block for CEF only
      _filename="cef_binary_${deps_version}_${target//-/_}.tar.xz"
      _url="${deps_baseurl}/${_filename}"
      _target="cef_binary_${deps_version}_${target//-/_}"
      typeset -g CEF_VERSION=${deps_version}

      log_status "Checking for available wrapper library..."
      local _skip=0
      if (( ${+CI} + ${+RESTORED_CEF} > 1 )) {
        _skip=1
      } elif [[ -f ${_target}/build/libcef_dll_wrapper/libcef_dll_wrapper.a ]] {
        _skip=1
      }

      if ! (( _skip )) {
        if [[ ! -f ${_filename} ]] {
          log_debug "Running curl ${curl_opts} ${_url}"
          curl ${curl_opts} ${_url} && \
            log_status "Downloaded ${deps_label} for ${target}."
        } else {
          log_status "Found downloaded ${deps_label}"
        }

        read -r artifact_checksum _ <<< "$(sha256sum ${_filename})"
        if [[ ${deps_hash} != ${artifact_checksum} ]] {
          log_error "Checksum of downloaded ${deps_label} does not match specification.
    Expected : ${deps_hash}
    Actual   : ${artifact_checksum}"
          return 2
        }
        log_status "Checksum of downloaded ${deps_label} matches."
        mkdir -p ${_target} && pushd ${_target}

        XZ_OPT=-T0 tar --strip-components 1 -xzf ../${_filename} && log_status "${deps_label} extracted."

        log_info "Fixing test targets..."
        /usr/bin/sed -i '.orig' '/add_subdirectory(tests\/ceftests)/d' ./CMakeLists.txt
        /usr/bin/sed -E -i '' 's/"10.(9|10|11)"/"'${DEPLOYMENT_TARGET}'"/' ./cmake/cef_variables.cmake

        log_info "Configuring CEF wrapper library..."

        local -a cmake_args=(
          -DPROJECT_ARCH=${target##*-}
          -DCEF_COMPILER_FLAGS="-Wno-deprecated-copy"
          -DCMAKE_BUILD_TYPE=${BUILD_CONFIG:-RelWithDebInfo}
          -DCMAKE_CXX_FLAGS="-std=c++11 -stdlib=libc++ -Wno-deprecated-declarations -Wno-unknown-warning-option"
          -DCMAKE_EXE_LINKER_FLAGS="-std=c++11 -stdlib=libc++"
          -DCMAKE_OSX_DEPLOYMENT_TARGET=${DEPLOYMENT_TARGET}
        )

        if (( _loglevel == 0 )) cmake_args+=(-Wno_deprecated -Wno-dev --log-level=ERROR)
        if (( ${+commands[ccache]} )) {
          cmake_args+=(
            -DCMAKE_C_COMPILER_LAUNCHER=ccache
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          )
        }

        cmake -S . -B build -G Ninja ${cmake_args}
        cmake --build build

        if (( ${+CODESIGN} )) {
          for library ("Release/Chromium Embedded Framework.framework/Libraries"/*.dylib) {
            log_info "Codesigning CEF library ${library:A:t}..."
            autoload -Uz read_codesign && read_codesign
            codesign --sign "${CODESIGN_IDENT:-}" --timestamp -o runtime ${library}
          }
        }
        mkdir -p build/libcef_dll
        popd
      } else {
        log_info 'Found existing Chromium Embedded Framework and loader library...'
      }
    }
    popd
  }

  pushd ${project_root:h}/obs-build-dependencies
  xattr -r -d com.apple.quarantine *
  log_status 'Removed quarantine flag from downloaded dependencies...'
  popd
}
