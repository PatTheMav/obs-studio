name: 'BUILD'

on:
  push:
    paths-ignore: ['**.md']
    branches: [master]
    tags: ['*']
  pull_request:
    paths-ignore: ['**.md']
    branches: [master]

env:
  CEF_BUILD_VERSION_MAC: '4183'
  CEF_BUILD_VERSION_LINUX: '4280'
  CEF_BUILD_VERSION_WIN: '75.1.16+g16a67c4+chromium-75.0.3770.100'
  QT_VERSION_MAC: '5.15.2'
  QT_VERSION_WIN: '5.15.2'
  DEPS_VERSION_MAC: '2021-02-28'
  DEPS_VERSION_WIN: '2019'
  VLC_VERSION_MAC: '3.0.8'
  VLC_VERSION_WIN: '3.0.0-git'
  TWITCH_CLIENTID: ${{ secrets.TWITCH_CLIENT_ID }}
  TWITCH_HASH: ${{ secrets.TWITCH_HASH }}
  RESTREAM_CLIENTID: ${{ secrets.RESTREAM_CLIENTID }}
  RESTREAM_HASH: ${{ secrets.RESTREAM_HASH }}
  BUILD_FOR_DISTRIBUTION: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}

jobs:
  clang_check:
    name: '01 - Code Format Check'
    runs-on: [ubuntu-latest]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2.3.3
        with:
          submodules: 'recursive'

      - name: 'Install clang-format'
        run: sudo apt-get install -y clang-format-10

      - name: 'Run clang-format'
        run: |
          ./formatcode.sh
          ./CI/check-format.sh

  macos_build:
    name: '02 - macOS (Latest)'
    runs-on: [macos-latest]
    if: always()
    needs: [clang_check]
    env:
      MIN_MACOS_VERSION: '10.13'
      SPARKLE_VERSION: '1.23.0'
      BLOCKED_FORMULAS: 'speexdsp curl php'
      SIGN_IDENTITY: ''
      HAVE_CODESIGN_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY != '' && secrets.MACOS_SIGNING_CERT != '' }}
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2.3.3
        with:
          submodules: 'recursive'

      - name: 'Check for Github Labels'
        if: github.event_name == 'pull_request'
        run: |
          LABELS_URL="$(echo ${{ github.event.pull_request.url }} | sed s'/pulls/issues/')"
          LABEL_FOUND="$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${LABELS_URL}/labels" | sed -n 's/.*"name": "\(.*\)",/\1/p' | grep 'Seeking Testers' || true)"
          if [ "${LABEL_FOUND}" = "Seeking Testers" ]; then
            echo "SEEKING_TESTERS=1" >> $GITHUB_ENV
          else
            echo "SEEKING_TESTERS=0" >> $GITHUB_ENV
          fi

      - name: 'Setup build environment (Homebrew + ENV)'
        run: |
          git fetch --prune --unshallow -q
          echo "OBS_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "OBS_GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "OBS_GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

          REMOVE_FORMULAS=""
          for FORMULA in ${{ env.BLOCKED_FORMULAS }}; do
            if [ -d "/usr/local/opt/${FORMULA}" ]; then
              REMOVE_FORMULAS="${REMOVE_FORMULAS}${FORMULA} "
            fi
          done

          if [ -n "${REMOVE_FORMULAS}" ]; then
            brew uninstall ${REMOVE_FORMULAS}
          fi
          brew bundle --file ./CI/scripts/macos/Brewfile

      - name: 'Restore Chromium Embedded Framework from cache'
        id: cef-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'cef-cache'
        with:
          path: ${{ github.workspace }}/CI_DEPS/cef_binary_${{ env.CEF_BUILD_VERSION_MAC }}_macosx64
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.CEF_BUILD_VERSION_MAC }}

      - name: 'Restore VLC dependency from cache'
        id: vlc-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'vlc-cache'
        with:
          path: ${{ github.workspace }}/CI_DEPS/vlc-${{ env.VLC_VERSION_MAC }}
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.VLC_VERSION_MAC }}

      - name: 'Restore Sparkle dependency from cache'
        id: sparkle-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'sparkle-cache'
        with:
          path: ${{ github.workspace }}/CI_DEPS/sparkle
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.SPARKLE_VERSION }}

      - name: 'Install dependencies'
        env:
          INSTALL_VLC: ${{ !steps.vlc-cache.outputs.cache-hit }}
          INSTALL_SPARKLE: ${{ !steps.sparkle-cache.outputs.cache-hit }}
          INSTALL_CEF: ${{ !steps.cef-cache.outputs.cache-hit }}
        run: |
          echo "  + Installing dependencies v${{ env.DEPS_VERSION_MAC }}"
          curl -s -S -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.DEPS_VERSION_MAC }}/macos-deps-${{ env.DEPS_VERSION_MAC }}.tar.gz
          tar -xf ./macos-deps-${{ env.DEPS_VERSION_MAC }}.tar.gz -C "/tmp"

          echo "  + Installing Qt v${{ env.QT_VERSION_MAC }}"
          curl -s -S -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.DEPS_VERSION_MAC }}/macos-qt-${{ env.QT_VERSION_MAC }}-${{ env.DEPS_VERSION_MAC }}.tar.gz
          tar -xf ./macos-qt-${{ env.QT_VERSION_MAC }}-${{ env.DEPS_VERSION_MAC }}.tar.gz -C "/tmp"

          xattr -r -d com.apple.quarantine /tmp/obsdeps

          if [ "${INSTALL_VLC}" = "true" ]; then
            echo "  + Installing dependency VLC v${{ env.VLC_VERSION_MAC }}"
            curl -s -S -L -O https://downloads.videolan.org/vlc/${{ env.VLC_VERSION_MAC }}/vlc-${{ env.VLC_VERSION_MAC }}.tar.xz
            if [ ! -d "${{ github.workspace }}/CI_DEPS" ]; then mkdir "${{ github.workspace }}/CI_DEPS"; fi
            tar -xf ./vlc-${{ env.VLC_VERSION_MAC }}.tar.xz -C "${{ github.workspace }}/CI_DEPS"
          fi

          if [ "${INSTALL_SPARKLE}" = "true" ]; then
            echo "  + Installing dependency Sparkle v${{ env.SPARKLE_VERSION }}"
            curl -s -S -L -o sparkle.tar.bz2 https://github.com/sparkle-project/Sparkle/releases/download/${{ env.SPARKLE_VERSION }}/Sparkle-${{ env.SPARKLE_VERSION }}.tar.bz2
            mkdir ${{ github.workspace }}/CI_DEPS/sparkle
            tar -xf ./sparkle.tar.bz2 -C ${{ github.workspace }}/CI_DEPS/sparkle
          fi

          if [ "${INSTALL_CEF}" = "true" ]; then
            echo "  + Installing dependency Chromium Embedded Framework (CEF) v${{ env.CEF_BUILD_VERSION_MAC }}"

            curl -s -S -L -O https://cdn-fastly.obsproject.com/downloads/cef_binary_${{ env.CEF_BUILD_VERSION_MAC }}_macosx64.tar.bz2
            tar -xf ./cef_binary_${{ env.CEF_BUILD_VERSION_MAC }}_macosx64.tar.bz2 -C ${{ github.workspace }}/CI_DEPS/
            cd ${{ github.workspace }}/CI_DEPS/cef_binary_${{ env.CEF_BUILD_VERSION_MAC }}_macosx64
            /usr/bin/sed -i '.orig' '/add_subdirectory(tests\/ceftests)/d' ./CMakeLists.txt
            /usr/bin/sed -i '.orig' s/\"10.9\"/\"${{ env.MIN_MACOS_VERSION }}\"/ ./cmake/cef_variables.cmake
            cmake -S . -B build -G Ninja -DCMAKE_CXX_FLAGS="-std=c++11 -stdlib=libc++ -Wno-deprecated-declarations" -DCMAKE_EXE_LINKER_FLAGS="-std=c++11 -stdlib=libc++" -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.MIN_MACOS_VERSION }}
            cmake --build build
            mkdir -p build/libcef_dll
          fi

      - name: 'Install Apple Developer Certificate'
        #if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && env.HAVE_CODESIGN_IDENTITY == 'true'
        if: github.event_name != 'pull_request' && env.HAVE_CODESIGN_IDENTITY == 'true'
        uses: apple-actions/import-codesign-certs@253ddeeac23f2bdad1646faac5c8c2832e800071
        with:
          p12-file-base64: ${{ secrets.MACOS_SIGNING_CERT }}
          p12-password: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}

      - name: 'Set Signing Identity'
        #if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && env.HAVE_CODESIGN_IDENTITY == 'true'
        if: github.event_name != 'pull_request' && env.HAVE_CODESIGN_IDENTITY == 'true'
        run: |
          echo "SIGN_IDENTITY=${{ secrets.MACOS_SIGNING_IDENTITY }}" >> $GITHUB_ENV

      - name: 'Build OBS'
        run: |
          LEGACY_BROWSER="$(test "${{ env.CEF_BUILD_VERSION_MAC }}" -le 3770 && echo "ON" || echo "OFF")"
          cmake -S . -B CI_BUILD -G Ninja \
            -DBUILD_FOR_DISTRIBUTION=${BUILD_FOR_DISTRIBUTION} \
            -DCEF_ROOT_DIR="${{ github.workspace }}/CI_DEPS/cef_binary_${{ env.CEF_BUILD_VERSION_MAC }}_macosx64" \
            -DVLC_PATH="${{ github.workspace }}/CI_DEPS/vlc-${{ env.VLC_VERSION_MAC }}" \
            -DCMAKE_PREFIX_PATH="/tmp/obsdeps;${{ github.workspace }}/CI_DEPS/sparkle" \
            -DENABLE_UNIT_TESTS=ON \
            -DBROWSER_LEGACY=$LEGACY_BROWSER \
            -DTWITCH_CLIENTID='${{ env.TWITCH_CLIENTID }}' \
            -DTWITCH_HASH='${{ env.TWITCH_HASH }}' \
            -DRESTREAM_CLIENTID='${{ env.RESTREAM_CLIENTID }}' \
            -DRESTREAM_HASH='${{ env.RESTREAM_HASH }}' \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.MIN_MACOS_VERSION }} \
            -DOBS_BUNDLE_CODESIGN_IDENTITY="${SIGN_IDENTITY:--}" \
            -DOBS_CODESIGN_LINKER=OFF \
            -DOBS_BUILD_NUMBER=${GITHUB_RUN_ID} \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/CI_INSTALL"

          cmake --build CI_BUILD

      - name: 'Run tests'
        if: success()
        run: cmake --build CI_BUILD -t test

      - name: 'Create build artifact'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        run: |
          FILE_DATE=$(date +%Y-%m-%d)
          FILE_NAME=$FILE_DATE-${{ env.OBS_GIT_HASH }}-${{ env.OBS_GIT_TAG }}-macOS.dmg
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV

          cmake --build CI_BUILD -t package

          DMG_NAME=$(/usr/bin/find ${{ github.workspace }}/CI_BUILD -type f -name "OBS-*.dmg" -depth 1)
          /usr/bin/codesign --force --sign "${SIGN_IDENTITY:--}" "${DMG_NAME}"

          mkdir -p "${{ github.workspace }}/CI_NIGHTLY/"

          mv "${DMG_NAME}" "${{ github.workspace }}/CI_NIGHTLY/${FILE_NAME}"
      - name: 'Upload build Artifact'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        uses: actions/upload-artifact@v2
        with:
          name: 'obs-macos'
          path: |
            ${{ github.workspace }}/CI_NIGHTLY/${{ env.FILE_NAME }}

  linux_build:
    name: '02 - Linux (Ubuntu, 20.04)'
    runs-on: [ubuntu-latest]
    if: always()
    needs: [clang_check]
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2.3.3
        with:
          submodules: 'recursive'

      - name: 'Check for Github Labels'
        if: github.event_name == 'pull_request'
        run: |
          LABELS_URL="$(echo ${{ github.event.pull_request.url }} | sed s'/pulls/issues/')"
          LABEL_FOUND="$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${LABELS_URL}/labels" | sed -n 's/.*"name": "\(.*\)",/\1/p' | grep 'Seeking Testers' || true)"
          if [ "${LABEL_FOUND}" = "Seeking Testers" ]; then
            echo "SEEKING_TESTERS=1" >> $GITHUB_ENV
          else
            echo "SEEKING_TESTERS=0" >> $GITHUB_ENV
          fi
      - name: 'Setup build environment'
        run: |
          git fetch --prune --unshallow -q
          echo "OBS_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "OBS_GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "OBS_GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

          sudo dpkg --add-architecture amd64
          sudo apt-get -qq update
          sudo apt-get install -y \
           build-essential \
           checkinstall \
           cmake \
           ninja-build \
           libasound2-dev \
           libavcodec-dev \
           libavdevice-dev \
           libavfilter-dev \
           libavformat-dev \
           libavutil-dev \
           libcurl4-openssl-dev \
           libfdk-aac-dev \
           libfontconfig-dev \
           libfreetype6-dev \
           libgl1-mesa-dev \
           libjack-jackd2-dev \
           libjansson-dev \
           libluajit-5.1-dev \
           libpulse-dev \
           libqt5x11extras5-dev \
           libsndio-dev \
           libspeexdsp-dev \
           libswresample-dev \
           libswscale-dev \
           libudev-dev \
           libv4l-dev \
           libva-dev \
           libvlc-dev \
           libx11-dev \
           libx264-dev \
           libxcb-randr0-dev \
           libxcb-shm0-dev \
           libxcb-xinerama0-dev \
           libxcomposite-dev \
           libxinerama-dev \
           libx11-xcb-dev \
           libxcb-xfixes0-dev \
           libmbedtls-dev \
           pkg-config \
           python3-dev \
           qtbase5-dev \
           qtbase5-private-dev \
           libqt5svg5-dev \
           swig \
           libcmocka-dev \

      - name: 'Restore Chromium Embedded Framework from cache'
        id: cef-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'cef-cache'
        with:
          path: ${{ github.workspace }}/CI_DEPS/cef_binary_${{ env.CEF_BUILD_VERSION_LINUX }}_linux64
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.CEF_BUILD_VERSION_LINUX }}

      - name: 'Install prerequisite: Chromium Embedded Framework'
        if: steps.cef-cache.outputs.cache-hit != 'true'
        run: |
          curl -kL https://cdn-fastly.obsproject.com/downloads/cef_binary_${{ env.CEF_BUILD_VERSION_LINUX }}_linux64.tar.bz2 -f --retry 5 -o cef.tar.bz2
          if [ ! -d "${{ github.workspace }}/CI_DEPS" ]; then mkdir "${{ github.workspace }}/CI_DEPS"; fi
          tar -C"${{ github.workspace }}/CI_DEPS" -xjf cef.tar.bz2

      - name: 'Build OBS'
        run: |
          cmake -S . -B CI_BUILD -G Ninja \
            -DBUILD_FOR_DISTRIBUTION=${{ env.BUILD_FOR_DISTRIBUTION }} \
            -DCEF_ROOT_DIR="${{ github.workspace }}/CI_DEPS/cef_binary_${{ env.CEF_BUILD_VERSION_LINUX }}_linux64" \
            -DENABLE_UNIT_TESTS=ON \
            -DTWITCH_CLIENTID='${{ env.TWITCH_CLIENTID }}' \
            -DTWITCH_HASH='${{ env.TWITCH_HASH }}' \
            -DRESTREAM_CLIENTID='${{ env.RESTREAM_CLIENTID }}' \
            -DRESTREAM_HASH='${{ env.RESTREAM_HASH }}' \
            -DLINUX_PORTABLE=ON \
            -DOBS_BUILD_NUMBER=${GITHUB_RUN_ID} \
            -DENABLE_PIPEWIRE=OFF \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/CI_INSTALL"

          cmake --build CI_BUILD

      - name: 'Run tests'
        if: success()
        run: cmake --build CI_BUILD -t test

      - name: 'Archive build artifact'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        run: |
          FILE_DATE=$(date +%Y-%m-%d)
          FILE_NAME=$FILE_DATE-${{ env.OBS_GIT_HASH }}-${{ env.OBS_GIT_TAG }}-linux64
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV

          cmake --build CI_BUILD -t package
          DEB_NAME=$(/usr/bin/find ${{ github.workspace }}/CI_BUILD -maxdepth 1 -type f -name "obs*.deb")
          mkdir -p "${{ github.workspace }}/CI_NIGHTLY/"
          mv ${DEB_NAME} "${{ github.workspace }}/CI_NIGHTLY/${FILE_NAME}.deb"

          cmake --build CI_BUILD -t install

          cd "${{ github.workspace }}/CI_INSTALL/"
          tar -cvzf "${{ github.workspace }}/CI_NIGHTLY/${FILE_NAME}.tar.gz" *

      - name: 'Upload build artifact (tar.gz)'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        uses: actions/upload-artifact@v2
        with:
          name: 'obs-linux-tar'
          path: ./CI_NIGHTLY/${{ env.FILE_NAME }}.tar.gz

      - name: 'Upload build artifact (deb)'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        uses: actions/upload-artifact@v2
        with:
          name: 'obs-linux-deb'
          path: ./CI_NIGHTLY/${{ env.FILE_NAME }}.deb

  windows_build:
    name: '02 - Windows (Latest)'
    runs-on: [windows-latest]
    needs: [clang_check]
    if: always()
    strategy:
      matrix:
        arch: [64, 32]
    env:
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      CMAKE_SYSTEM_VERSION: "10.0.18363.657"
      VIRTUALCAM-GUID: "A3FCE0F5-3493-419F-958A-ABA1250EC20B"
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: 'Checkout'
        uses: actions/checkout@v2.3.3
        with:
          submodules: 'recursive'

      - name: 'Check for Github Labels'
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          LABELS_URL="$(echo ${{ github.event.pull_request.url }} | sed s'/pulls/issues/')"
          LABEL_FOUND="$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${LABELS_URL}/labels" | sed -n 's/.*"name": "\(.*\)",/\1/p' | grep 'Seeking Testers' || true)"
          if [ "${LABEL_FOUND}" = "Seeking Testers" ]; then
            echo "SEEKING_TESTERS=1" >> $GITHUB_ENV
          else
            echo "SEEKING_TESTERS=0" >> $GITHUB_ENV
          fi

      - name: 'Setup build environment'
        shell: bash
        run: |
          git fetch --prune --unshallow -q
          echo "OBS_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "OBS_GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "OBS_GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: 'Restore VLC dependency from cache'
        id: vlc-cache
        uses: actions/cache@v2.1.2
        env:
          CACHE_NAME: 'windows-vlc-cache'
        with:
          path: ${{ github.workspace }}/CI_DEPS/vlc
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.VLC_VERSION }}

      - name: 'Install dependencies'
        env:
          INSTALL_VLC: ${{ !steps.vlc-cache.outputs.cache-hit }}
        run: |
          echo "  + Installing dependencies v${{ env.DEPS_VERSION_WIN }}"
          curl -kLO https://cdn-fastly.obsproject.com/downloads/dependencies${{ env.DEPS_VERSION_WIN }}.zip -f --retry 5 -C -
          7z x dependencies${{ env.DEPS_VERSION_WIN }}.zip -o"${{ github.workspace }}\CI_DEPS/deps"

          echo "  + Installing Qt v${{ env.QT_VERSION_WIN }}"
          curl -kLO https://cdn-fastly.obsproject.com/downloads/Qt_${{ env.QT_VERSION_WIN }}.7z -f --retry 5 -C -
          7z x Qt_${{ env.QT_VERSION_WIN }}.7z -o"${{ github.workspace }}\CI_DEPS\Qt"

          echo "  + Installing Chromium Embedded Framework (CEF) v${{ env.CEF_BUILD_VERSION_WIN }}"
          curl -kL https://cdn-fastly.obsproject.com/downloads/cef_binary_${{ env.CEF_BUILD_VERSION_WIN }}_windows${{ matrix.arch }}_minimal.zip -f --retry 5 -o cef.zip
          7z x cef.zip -o"${{ github.workspace }}/CI_DEPS"

          if ($env:INSTALL_VLC -eq "true") {
            echo "  + Installing VLC v${{ env.VLC_VERSION_WIN }}"
            curl -kL https://cdn-fastly.obsproject.com/downloads/vlc.zip -f --retry 5 -o vlc.zip
            7z x vlc.zip -o"${{ github.workspace }}\CI_DEPS\vlc"
          }

          mkdir ${{ github.workspace }}\build
          mkdir ${{ github.workspace }}\build${{ matrix.arch }}

      - name: 'Build OBS'
        run: |
          if ("${{ matrix.arch }}" -eq "64") {
            $env:BUILD_ARCH="x64"
            $env:QT_FOLDER="${{ github.workspace }}/CI_DEPS/Qt/${{ env.QT_VERSION_WIN }}/msvc2019_64"
          } else {
            $env:BUILD_ARCH="Win32"
            $env:QT_FOLDER="${{ github.workspace }}/CI_DEPS/Qt/${{ env.QT_VERSION_WIN }}/msvc2019"
          }

          $env:DEPS_FOLDER="${{ github.workspace }}/CI_DEPS/deps/win${{ matrix.arch }}"
          $env:CMAKE_PREFIX_PATH="${env:DEPS_FOLDER};${env:DEPS_FOLDER}/bin;${env:QT_FOLDER}"

          cmake -S . -B build${{ matrix.arch }} `
            -G "${{ env.CMAKE_GENERATOR }}" `
            -A"$env:BUILD_ARCH" `
            -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" `
            -DCEF_ROOT_DIR="${{ github.workspace }}/CI_DEPS/cef_binary_${{ env.CEF_BUILD_VERSION_WIN }}_windows${{ matrix.arch }}_minimal" `
            -DVLC_PATH="${{ github.workspace }}/CI_DEPS/vlc" `
            -DBUILD_FOR_DISTRIBUTION=${{ env.BUILD_FOR_DISTRIBUTION }} `
            -DTWITCH_CLIENTID='${{ env.TWITCH_CLIENTID }}' `
            -DTWITCH_HASH='${{ env.TWITCH_HASH }}' `
            -DRESTREAM_CLIENTID='${{ env.RESTREAM_CLIENTID }}' `
            -DRESTREAM_HASH='${{ env.RESTREAM_HASH }}' `
            -DCOPIED_DEPENDENCIES=FALSE `
            -DCOPY_DEPENDENCIES=TRUE `
            -DVIRTUALCAM_GUID=${{ env.VIRTUALCAM-GUID }} `
            -DOBS_BUILD_NUMBER="$env:GITHUB_RUN_ID" `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/CI_INSTALL"

          msbuild /m /p:Configuration=RelWithDebInfo .\build${{ matrix.arch }}\obs-studio.sln

      - name: 'Create build artifact'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        run: |
          $env:FILE_DATE=(Get-Date -UFormat "%F")
          $env:FILE_NAME="${env:FILE_DATE}-${{ env.OBS_GIT_HASH }}-${{ env.OBS_GIT_TAG }}-win${{ matrix.arch }}.zip"
          echo "FILE_NAME=${env:FILE_NAME}" >> ${env:GITHUB_ENV}
          robocopy .\build${{ matrix.arch }}\rundir\RelWithDebInfo .\build\ /E /XF .gitignore
          7z a ${env:FILE_NAME} .\build\*

      - name: 'Upload build artifact'
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        uses: actions/upload-artifact@v2
        with:
          name: 'obs-win${{ matrix.arch }}'
          path: '*-win${{ matrix.arch }}.zip'

  linux_package:
    name: '02 - Flatpak Bundle'
    runs-on: [ubuntu-latest]
    needs: [clang_check]
    if: always()
    defaults:
      run:
        shell: bash
    container:
      image: bilelmoussaoui/flatpak-github-actions:kde-5.15
      options: --privileged
    steps:
      - name: 'Check for Github Labels'
        if: github.event_name == 'pull_request'
        run: |
          LABELS_URL="$(echo ${{ github.event.pull_request.url }} | sed s'/pulls/issues/')"
          LABEL_FOUND="$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${LABELS_URL}/labels" | sed -n 's/.*"name": "\(.*\)",/\1/p' | grep 'Seeking Testers' || true)"
          if [ "${LABEL_FOUND}" = "Seeking Testers" ]; then
            echo "SEEKING_TESTERS=1" >> $GITHUB_ENV
          else
            echo "SEEKING_TESTERS=0" >> $GITHUB_ENV
          fi

      - name: 'Checkout'
        uses: actions/checkout@v2.3.3
        if: success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1')
        with:
          submodules: 'recursive'

      - name: 'Setup build environment'
        run: |
          git fetch --prune --unshallow -q
          echo "OBS_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "OBS_GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "OBS_GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Build Flatpak Manifest
        uses: bilelmoussaoui/flatpak-github-actions/flatpak-builder@v3
        with:
          bundle: obs-studio-${{ github.sha }}.flatpak
          manifest-path: CI/flatpak/com.obsproject.Studio.json
          cache-key: flatpak-builder-${{ github.sha }}

  windows_package:
    name: '03 - Windows Installer'
    runs-on: [ubuntu-latest]
    needs: [windows_build]
    if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
    steps:
      - name: 'Download 64-bit artifact'
        uses: actions/download-artifact@v2
        with:
          name: 'obs-win64'
          path: ${{ github.workspace }}/win64/

      - name: 'Download 32-bit artifact'
        uses: actions/download-artifact@v2
        with:
          name: 'obs-win32'
          path: ${{ github.workspace }}/win32/

      - name: 'Do nothing for now'
        run: echo "Under construction"

  macos_release:
    name: '03 - macOS notarized image'
    runs-on: [macos-latest]
    needs: [macos_build]
    env:
      HAVE_CODESIGN_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY != '' && secrets.MACOS_SIGNING_CERT != '' }}
    if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Check Codesigning identity'
        run: test "${HAVE_CODESIGN_IDENTITY}" = "true"

      - name: 'Download artifact'
        uses: actions/download-artifact@v2
        with:
          name: 'obs-macos'

      - name: 'Install Apple Developer Certificate'
        uses: apple-actions/import-codesign-certs@253ddeeac23f2bdad1646faac5c8c2832e800071
        with:
          p12-file-base64: ${{ secrets.MACOS_SIGNING_CERT }}
          p12-password: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}

      - name: 'Install prerequisite XCNotary'
        run: brew install akeru-inc/tap/xcnotary

      - name: 'Create disk image for distribution'
        run: |
          FILE_DATE=$(date +%Y-%m-%d)
          FILE_NAME=$FILE_DATE-${{ env.OBS_GIT_TAG }}-macOS.dmg
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV

          DMG_NAME=$(basename $(/usr/bin/find . -type f -name "*.dmg" -depth 1))

          xcrun altool --store-password-in-keychain-item "AC_PASSWORD" -u "${{ secrets.MACOS_NOTARIZATION_USERNAME }}" -p "${{ secrets.MACOS_NOTARIZATION_PASSWORD }}"

          hdiutil attach -readonly -noverify -noautoopen -quiet "${DMG_NAME}"
          VOLUME_NAME=$(hdiutil info -plist | grep "/Volumes/" | sed 's/<string>\/Volumes\/\([^<]*\)<\/string>/\1/' | sed -e 's/^[[:space:]]*//')
          xcnotary precheck "/Volumes/${VOLUME_NAME}/OBS.app"

          if [ "$?" -eq 0 ]; then
            xcnotary notarize "$DMG_NAME" --developer-account "${{ secrets.MACOS_NOTARIZATION_USERNAME }}" --developer-password-keychain-item "AC_PASSWORD" --provider "${{ secrets.ASC_PROVIDER_SHORTNAME }}"
            hdiutil detach "/Volumes/${VOLUME_NAME}"
            mkdir -p "${{ github.workspace }}/CI_RELEASE/"
            mv "${DMG_NAME}" "${{ github.workspace }}/CI_RELEASE/${FILE_NAME}"
          else
            hdiutil detach "/Volumes/${VOLUME_NAME}"
            exit 1
          fi

      - name: 'Publish macOS disk image'
        uses: actions/upload-artifact@v2
        with:
          name: 'obs-macos-release'
          path: ${{ github.workspace }}/CI_RELEASE/${{ env.FILE_NAME }}
